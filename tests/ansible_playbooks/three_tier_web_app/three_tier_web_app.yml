---
- name: Deploy a three-tier web application
  hosts: all
  become: yes
  vars:
    nodejs_version: "18"
    threat_model_metadata:
      zones:
        - name: "Internet"
          type: "External"
          isTrusted: False
        - name: "DMZ"
          type: "Internal"
          isTrusted: True
        - name: "Internal Network"
          type: "Internal"
          isTrusted: True

      actors:
        - name: "External User"
          isHuman: True
          boundary: "Internet"

      components:
        - name: "WebServer_1"
          stereotype: "Server"
          boundary: "DMZ"
          services: ["web"]
        - name: "AppServer_1"
          stereotype: "Server"
          boundary: "Internal Network"
          services: ["app"]
        - name: "DBServer_1"
          stereotype: "Server"
          boundary: "Internal Network"
          services: ["db"]

      data:
        - name: "Web Traffic"
          classification: "PUBLIC"
          lifetime: "TRANSIENT"
        - name: "Application Requests"
          classification: "RESTRICTED"
          lifetime: "TRANSIENT"
        - name: "Database Queries"
          classification: "RESTRICTED"
          lifetime: "TRANSIENT"

      data_flows:
        - name: "User to WebServer"
          source: "actor:External User"
          destination: "component:WebServer_1"
          protocol: "HTTPS"
          data: "Web Traffic"
          description: "External user accesses web server"
        - name: "WebServer to AppServer"
          source: "component:WebServer_1"
          destination: "component:AppServer_1"
          protocol: "HTTP/S"
          data: "Application Requests"
          description: "Web server communicates with application server"
        - name: "AppServer to DBServer"
          source: "component:AppServer_1"
          destination: "component:DBServer_1"
          protocol: "DB"
          data: "Database Queries"
          description: "Application server communicates with database server"

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

- name: Setup Web Server
  hosts: webservers
  become: yes
  tasks:
    - name: Install Nginx
      ansible.builtin.apt:
        name: nginx
        state: present

    - name: Configure Nginx as a reverse proxy
      ansible.builtin.template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/default
      notify: Restart Nginx

    - name: Enable new site configuration
      ansible.builtin.file:
        src: /etc/nginx/sites-available/default
        dest: /etc/nginx/sites-enabled/default
        state: link
      notify: Restart Nginx

    - name: Allow HTTP traffic on port 80
      ansible.builtin.ufw:
        rule: allow
        port: '80'
        proto: tcp

  handlers:
    - name: Restart Nginx
      ansible.builtin.service:
        name: nginx
        state: restarted

- name: Setup Application Server
  hosts: appservers
  become: yes
  tasks:
    - name: Install Node.js and npm
      ansible.builtin.shell: |
        curl -fsSL https://deb.nodesource.com/setup_{{ nodejs_version }}.x | sudo -E bash -
        sudo apt-get install -y nodejs
      args:
        creates: /usr/bin/node

    - name: Install application dependencies
      ansible.builtin.npm:
        path: /srv/app

    - name: Create a simple Node.js application
      ansible.builtin.copy:
        dest: "/srv/app/index.js"
        content: |
          const http = require('http');
          const port = 3000;

          const server = http.createServer((req, res) => {
            res.statusCode = 200;
            res.setHeader('Content-Type', 'text/plain');
            res.end('Hello from the App Server!');
          });

          server.listen(port, () => {
            console.log(`Server running at http://localhost:${port}/`);
          });

    - name: Start the application with pm2
      ansible.builtin.npm:
        name: pm2
        global: yes
        state: present
      notify: Start Node.js app

  handlers:
    - name: Start Node.js app
      ansible.builtin.command: pm2 start /srv/app/index.js
      args:
        chdir: /srv/app

- name: Setup Database Server
  hosts: dbservers
  become: yes
  tasks:
    - name: Install PostgreSQL
      ansible.builtin.apt:
        name: postgresql
        state: present

    - name: Start and enable PostgreSQL service
      ansible.builtin.service:
        name: postgresql
        state: started
        enabled: yes
